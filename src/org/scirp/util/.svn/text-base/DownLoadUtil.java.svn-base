package org.scirp.util;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;


public class DownLoadUtil
{
	
	public static void main(String[] args) {
		String root="e:/ijmis-files/paper-files/";
		System.out.println( root.substring(root.lastIndexOf("/ijmis-files/")+13));
	}
	/**
	 * 格式化当前时间
	 * 
	 * @return 1921-05-01 13:12:12
	 */
	public static String getCurrentDateTime(String pattern) {
		java.text.SimpleDateFormat sd = new java.text.SimpleDateFormat(pattern);
		return sd.format(new java.util.Date());
	}
	
	public static final int BUFFER_SIZE = 4096;
	
	public static String toString(InputStream in, String encoding) {
		BufferedReader reader = null;
		StringBuilder sb = null;
		try {
			reader = new BufferedReader(new InputStreamReader(in, encoding));
			sb = new StringBuilder();
			int c;
			c = reader.read();
			while (c != -1) {
				sb.append((char) c);
				c = reader.read();
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			DownLoadUtil.closeQuietly(reader);
		}
		return sb.toString();
	}
	
	public static StringBuilder readFileToString(String path) {
		BufferedReader reader = null;
		StringBuilder sb = null;
		try {
			reader = new BufferedReader(new FileReader(path));
			sb = new StringBuilder();
			int c;
			c = reader.read();
			while (c != -1) {
				sb.append((char) c);
				c = reader.read();
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			DownLoadUtil.closeQuietly(reader);
		}
		return sb;
	}
	
	
	public static StringBuilder readFileToString(String path, String encoding) {
		BufferedReader reader = null;
		StringBuilder sb = null;
		try {
			reader = new BufferedReader(new InputStreamReader(
					new FileInputStream(path), encoding));
			sb = new StringBuilder();
			int c;
			c = reader.read();
			while (c != -1) {
				sb.append((char) c);
				c = reader.read();
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			DownLoadUtil.closeQuietly(reader);
		}
		return sb;
	}
	 
	
	public static void saveStringToFile(String path, String content) {
		makeDir(path);
		BufferedWriter writer = null;
		try {
			writer = new BufferedWriter(new FileWriter(path));
			writer.write(content);
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			DownLoadUtil.closeQuietly(writer);
		}
	}
	
	
	public static boolean makeDir(String path) {
		return makeDir(new File(path));
	}
	
	public static boolean makeDir(File file) {
		if (file.isDirectory()) {
		} else {
			file = file.getParentFile();
		}
		if (!file.exists()) {
			return file.mkdirs();
		}
		return false;
	}
	
	
	public static void copy(String fromPath, String toPath) {
		makeDir(toPath);
		try {
			InputStream is = new BufferedInputStream(new FileInputStream(
					fromPath));
			OutputStream os = new BufferedOutputStream(new FileOutputStream(
					toPath));
			copy(is, os);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	public static void copy(File fromPath, File toPath) {
		makeDir(toPath);
		try {
			InputStream is = new BufferedInputStream(new FileInputStream(fromPath));
			OutputStream os = new BufferedOutputStream(new FileOutputStream(toPath));
			copy(is, os);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	public static int copy(InputStream in, OutputStream out) throws IOException {
		try {
			int byteCount = 0;
			byte[] buffer = new byte[BUFFER_SIZE];
			int bytesRead = -1;
			while ((bytesRead = in.read(buffer)) != -1) {
				out.write(buffer, 0, bytesRead);
				byteCount += bytesRead;
			}
			out.flush();
			return byteCount;
		} finally {
			DownLoadUtil.closeQuietly(in);
			DownLoadUtil.closeQuietly(out);
		}
	}

	public static void closeQuietly(Reader input) {
		try {
			if (input != null) {
				input.close();
			}
		} catch (IOException ioe) {
			// ignore
		}
	}

	public static void closeQuietly(Writer output) {
		try {
			if (output != null) {
				output.close();
			}
		} catch (IOException ioe) {
			// ignore
		}
	}

	public static void closeQuietly(InputStream input) {
		try {
			if (input != null) {
				input.close();
			}
		} catch (IOException ioe) {
			// ignore
		}
	}

	public static void closeQuietly(OutputStream output) {
		try {
			if (output != null) {
				output.close();
			}
		} catch (IOException ioe) {
			// ignore
		}
	}
	
}
